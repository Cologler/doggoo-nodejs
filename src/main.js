'use strict';

const fs = require('fs');
const PATH = require('path');

const { ioc } = require('@adonisjs/fold');
const { App } = require('anyflow');

const { Novel } = require('./models/novel');
require('./print');

ioc.singleton('event-emitter', () => {
    const events = require('events');
    return new events.EventEmitter();
});
ioc.singleton('dom', () => {
    const { JSDOM } = require('jsdom');
    return new JSDOM();
});

require('./app');
require('./options');
require('./handlers/image-downloader');
require('./models/factory');

const sites = require('./sites');

function createRoot(output) {
    if (output) {
        const path = output;
        if (!fs.existsSync(path)) {
            fs.mkdirSync(path);
            return path;
        }
    } else {
        const root = output || '.';
        let index = 1;
        while (true) {
            const path = PATH.join(root, 'novel-' + index);
            if (!fs.existsSync(path)) {
                fs.mkdirSync(path);
                return path;
            }
            index += 1;
        }
    }
}

async function main() {
    const options = ioc.use('options');
    await options.loadAsync();

    const appinfo = ioc.use('app-info');
    const infos = {
        appinfo: `${appinfo.name} (build ${appinfo.build})`,
        source: options.source,
        format: 'file',
        toString: function () {
            return `This ${this.format} was generated by ${this.appinfo}from ${this.source}`;
        }
    };
    ioc.singleton('infos', () => infos);

    const site = sites.find(z => z.match());
    if (!site) {
        ioc.use('error')('unknown source <%s>.', options.source);
    }

    require('./components/text-converter').setup();
    require('./generators').setup();

    const parser = new site.Parser();

    const info = ioc.use('info');

    info('matched parser <%s>.', parser.name);

    const rootDir = createRoot(options.output);
    info('creating book on %s ...', rootDir);
    process.chdir(rootDir);

    const app = new App();
    app.use((c, n) => {
        // setup envs
        c.state.options = options;
        c.state.novel = new Novel();
        return n();
    });
    app.use(parser);

    const { Filter } = require('./handlers/chapter-filter');
    app.branch(c => c.state.options.hasFlag('--enable-filter'))
        .use(new Filter());

    const { Optimizer } = require('./handlers/optimize-composition');
    app.use(new Optimizer());

    const generator = ioc.use('generator');
    if (generator.requireImages) {
        app.use(ioc.use('image-downloader'));
    }
    app.use(generator);

    await app.run();
    info(`Done.`);
}

(async function() {
    try {
        await main();
    } catch (error) {
        console.error(error);
        process.exit(1); // cancel all incompletion jobs.
    }
})();
